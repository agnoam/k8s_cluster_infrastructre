apiVersion: "apps/v1"
kind: "Deployment"

metadata:
  name: "private-registry"
  labels:
    app: "private-registry"

spec:
  # replicas: 1
  selector:
    matchLabels:
      app: "private-registry"

  template:
    metadata:
      namespace: "private-registry"
      labels:
        app: "private-registry"

    spec:
      # In case we want to specify specific node to run our deployments on
      # N.B - All the body of nodeSelector is the label
      # Like:
      # nodeSelector:
      #   <your-label>
      # nodeSelector:
      #   registry_node: "true" # <node-label>

      volumes:
        - name: "certs-vol"
          persistentVolumeClaim:
            claimName: "private-registry-certs-claim"

        - name: "registry-vol"
          persistentVolumeClaim:
            claimName: "private-registry-data-volume-claim"

        # - name: "registry-config"
        #   configMap:
        #     name: "private-registry-config"

      containers:
        - name: "private-registry"
          image: "registry:2"
          # imagePullPolicy: IfNotPresent

          env:
            - name: "REGISTRY_HTTP_TLS_CERTIFICATE"
              value: "/certs/registry.crt"
            - name: "REGISTRY_HTTP_TLS_KEY"
              value: "/certs/registry.key"

          ports:
            - containerPort: 5000

          volumeMounts:
            - name: "certs-vol"
              mountPath: "/certs"
              
            - name: "registry-vol"
              mountPath: "/var/lib/registry"

            # - name: "registry-config"
            #   subPath: "file-content" # Key name of configmap
            #   mountPath: "/etc/docker/registry/config.yml"
   
---

apiVersion: "v1"
kind: "Service"

metadata:
  labels:
    app: "private-registry"
  name: "private-registry"

spec:
  selector:
    app: "private-registry"

  ports:
    - protocol: "TCP"
      port: 5000
      targetPort: 5000
      nodePort: 31320

  type: "NodePort"